from decimal import Decimal

class Cart:
    def __init__(self, request):
        self.session = request.session
        cart = self.session.get('cart')
        if not cart:
            cart = self.session['cart'] = {}
        self.cart = cart
        self.promo_code = self.session.get('promo_code')

    def add(self, product, quantity=1):
        product_id = str(product.id)
        if product_id not in self.cart:
            self.cart[product_id] = {
                'quantity': 0,
                'price': str(product.price)
            }
        self.cart[product_id]['quantity'] += quantity
        self.save()

    def update(self, product, quantity):
        product_id = str(product.id)
        if product_id in self.cart:
            self.cart[product_id]['quantity'] = quantity
            self.save()

    def remove(self, product):
        product_id = str(product.id)
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()

    def get_item_total_price(self, product):
        product_id = str(product.id)
        if product_id in self.cart:
            price = float(self.cart[product_id]['price'])
            quantity = self.cart[product_id]['quantity']
            return price * quantity
        return 0

    def get_total_price(self):
        total = 0
        for item in self.cart.values():
            price = float(item['price'])
            quantity = item['quantity']
            total += price * quantity
        return round(total, 2)

    def apply_promo_code(self, code):
     from .models import PromoCode
    
     print(f"=== –ü–û–ò–°–ö –ü–†–û–ú–û–ö–û–î–ê ===")
     print(f"–ò—â–µ–º: '{code}'")
     print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: '{code.upper()}'")
    
     try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–∫ –µ—Å—Ç—å
        promo = PromoCode.objects.get(code=code.upper())
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: '{promo.code}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
        from django.utils import timezone
        now = timezone.now()
        print(f"–ê–∫—Ç–∏–≤–µ–Ω: {promo.active}")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.used_count}/{promo.max_usage}")
        print(f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {promo.valid_from}")
        print(f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {promo.valid_to}")
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
        print(f"–í –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∞—Ç: {promo.valid_from <= now <= promo.valid_to}")
        
        self.session['promo_code'] = {
            'code': promo.code,
            'discount': promo.discount
        }
        self.save()
        return True, promo
        
     except PromoCode.DoesNotExist:
        print("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        # –í—ã–≤–µ–¥–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        all_promos = PromoCode.objects.all()
        print("–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –±–∞–∑–µ:")
        for p in all_promos:
            print(f"  - '{p.code}'")
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def remove_promo_code(self):
        if 'promo_code' in self.session:
            del self.session['promo_code']
            self.save()

    def get_discount(self):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
     if 'promo_code' in self.session:
        discount = self.session['promo_code'].get('discount', 0)
        print(f"üéØ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏: {discount}%")
        return discount
     else:
        print("üéØ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
        return 0

    def get_total_with_discount(self):
     total = self.get_total_price()
     discount = self.get_discount()
     print(f"üîß –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏: total={total}, discount={discount}%")
    
     if discount:
        discounted_total = total * (100 - discount) / 100
        print(f"üîß –ò—Ç–æ–≥ —Å–æ —Å–∫–∏–¥–∫–æ–π: {discounted_total} ‚ÇΩ")
        return round(discounted_total, 2)
     return total

    def __iter__(self):
     from catalog.models import Product
     product_ids = self.cart.keys()
     products = Product.objects.filter(id__in=product_ids)
     cart = self.cart.copy()
    
     for product in products:
        cart[str(product.id)]['product'] = product
        cart[str(product.id)]['product_id'] = product.id  # üëà –¥–æ–±–∞–≤–ª—è–µ–º id
    
     for item in cart.values():
        item['total_price'] = float(item['price']) * item['quantity']
        yield item
    def __len__(self):
        return sum(item['quantity'] for item in self.cart.values())

    def save(self):
        self.session.modified = True

    def clear(self):
        del self.session['cart']
        self.save()